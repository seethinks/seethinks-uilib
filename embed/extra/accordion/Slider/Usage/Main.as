package {	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		import fl.motion.AdjustColor;	import flash.filters.ColorMatrixFilter;		public final class Main extends Sprite	{		private var color:AdjustColor = new AdjustColor();		private var filter:ColorMatrixFilter;				public final function Main():void		{			/* Required to create initial Matrix */						color.brightness = 0;			color.contrast = 0;			color.hue = 0;			color.saturation = 0;						/* Center Slider head */						slider.head.x = slider.width * 0.5 - slider.head.width * 0.5;						addListeners();		}				private final function addListeners():void		{			slider.head.addEventListener(MouseEvent.MOUSE_DOWN, initDrag);			slider.addEventListener(MouseEvent.MOUSE_UP, terminateDrag);			stage.addEventListener(MouseEvent.MOUSE_UP, terminateDrag);		}				private final function initDrag(e:MouseEvent):void		{			slider.head.startDrag(false, new Rectangle(0, 0, slider.width - slider.head.width, 0));			slider.addEventListener(MouseEvent.MOUSE_MOVE, onSliderMove);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onSliderMove);		}				private final function onSliderMove(e:MouseEvent):void		{			slider.head.txtTF.text = slider.head.x - 116 + slider.head.width * 0.5; //116 is slider center			slider.head.txt2TF.text = slider.head.x - 116 + slider.head.width * 0.5;						/* Live Action here: this action will be updated as soon as you move the slider */						color.contrast = int(slider.head.txtTF.text);			update();		}				private final function terminateDrag(e:MouseEvent):void		{			slider.head.stopDrag();			slider.removeEventListener(MouseEvent.MOUSE_MOVE, onSliderMove);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onSliderMove);						/* Action here: this action will be updated when the mouse button is released */		}				private final function update():void		{			filter = new ColorMatrixFilter(color.CalculateFinalFlatArray());			image.filters = [filter];		}	}}